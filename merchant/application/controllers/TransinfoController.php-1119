<?php
	require_once(APPLICATION_PATH.'models/Merchants.php');
	class TransinfoController extends Zend_Controller_Action {
		function indexAction() {
			$scnsp = Zend_Registry::get('scnsp');
			$merchant_id = $scnsp->merchant_id;
			if ($merchant_id == null || $merchant_id <=0) {
				$this->_redirect('/index');
			}

			$get = $this->getRequest()->getParams();
			if (isset($get['id']) && $get['id'] > 0) {
				$trans_id = $get['id'];
			} else {
				$this->_redirect('/Transaction/index');
			}

			if (isset($get['error']) && $get['error'] != '') {
				$error_info = html_entity_decode($get['error']);
				$this->view->headScript()->setScript('alert("'.$error_info.'");');
			}

			$transaction = Merchants::getTransDetail($merchant_id,$trans_id);
			
			if (!sizeof($transaction)) $this->_redirect('/Transaction/index');
			$this->view->transaction = $transaction;
			$currency = new Zend_Currency('en_US');
			$this->view->symbol= $currency->getSymbol();
			$response = $this->getResponse(); 
			$response->insert('header', $this->view->render('header2.phtml')); 
			//$response->insert('right', $this->view->render('searchbox.phtml')); 
			$response->insert('footer', $this->view->render('footer.phtml'));
		}

		function receiveAction() {
			$scnsp = Zend_Registry::get('scnsp');
			$merchant_id = $scnsp->merchant_id;
			if ($merchant_id == null || $merchant_id <=0) {
				$this->_redirect('/index');
			}

			$post = $this->getRequest()->getParams();
			if (isset($post['transID']) && $post['transID'] > 0) {
				$trans_id = $post['transID'];
			} else {
				$this->_redirect('/Transaction/index');
			}

			$transaction = Merchants::getTransDetail($merchant_id,$trans_id);
			if (!sizeof($transaction)) $this->_redirect('/Transaction/index');
				
			$merchants = Merchants::getMerchantInfo($merchant_id);
						
			$customer_name = explode(" ",$transaction['trans_ccowner']);
			$shipping_name = explode(" ",$transaction['shipping_name']);
			
			$configs = Merchants::getConfig();
			
			define('CFG_MODULE_PAYMENT_AGPAY_LOGIN',$configs['CFG_MODULE_PAYMENT_AUTHORIZENET_LOGIN']);
			define('CFG_MODULE_PAYMENT_AGPAY_TXNKEY',$configs['CFG_MODULE_PAYMENT_AUTHORIZENET_TXNKEY']);

			$params = array(
							  'x_login' => CFG_MODULE_PAYMENT_AGPAY_LOGIN,
							  'x_tran_key' => CFG_MODULE_PAYMENT_AGPAY_TXNKEY,
							  'x_version' => '3.1',
							  'x_delim_data' => 'TRUE',
							  'x_delim_char' => ',',
							  'x_encap_char' => '"',
							  'x_relay_response' => 'FALSE',
							  'x_first_name' => $customer_name[0],
							  'x_last_name' => $customer_name[1],
							  'x_address' => $transaction['customer_street'],
							  'x_city' => $transaction['customer_city'],
							  'x_state' => $transaction['customer_state'],
							  'x_zip' => $transaction['shipping_postcode'],
							  'x_country' => $transaction['customer_country'],
							  'x_phone' => $transaction['customer_telephone'],
							  'x_cust_id' => $merchant_id,
							  'x_email' => $merchants['merchant_email'],
							  'x_description' => 'Online process',
							  'x_amount' => $transaction['trans_amount'],
							  'x_invoice_num' => '('.$merchant_id.')'.$transaction['trans_invoice'],
							  'x_method' => 'CC',
							  'x_type' => 'AUTH_CAPTURE',
							  'x_card_num' => $transaction['trans_ccnum'],
							  'x_exp_date' => $transaction['trans_expire'],
							  'x_card_code' => $transaction['trans_cvv2'],
							  'x_customer_ip' => $transaction['customer_ip'],
							  'x_ship_to_first_name' => $shipping_name[0],
							  'x_ship_to_last_name' => $shipping_name[1],
						      'x_ship_to_address' => $transaction['shipping_street'],
							  'x_ship_to_city' => $transaction['shipping_city'],
							  'x_ship_to_state' => $transaction['shipping_state'],
							  'x_ship_to_zip' => $transaction['shipping_zip'],
				              'x_ship_to_country' => $transaction['shipping_country'],
							  'x_encrypt_key' => strtoupper(md5(CFG_MODULE_PAYMENT_AGPAY_LOGIN.CFG_MODULE_PAYMENT_AGPAY_TXNKEY.$transaction['trans_amount']))
							);
			
			$gateway_url = 'https://secure.authorize.net/gateway/transact.dll';
			//$gateway_url = 'https://test.authorize.net/gateway/transact.dll';
			
			$post_string = '';
			foreach ($params as $key => $value){
				$post_string .= $key . '=' . urlencode(trim($value)) . '&';
			}
			$post_string = substr($post_string, 0, -1);

			$transaction_response = $this->sendTransactionToGateway($gateway_url, $post_string);

			if (!empty($transaction_response)) {		
				$regs = preg_split("/,(?=(?:[^\"]*\"[^\"]*\")*(?![^\"]*\"))/", $transaction_response);
				foreach ($regs as $key => $value) {
					//$regs[$key] = substr($value, 1, -1); // remove double quotes
					$regs[$key] = str_replace('\"','',$value);
					$regs[$key] = str_replace('"','',$value);
				}
				
				if (isset($regs[6]) && $regs[6] !='' && $regs[6] !='0') {
					$ag_trans_id = $regs[6].'_'.date('ymd').mt_rand(100,999);
				} else {
					$ag_trans_id = $transaction['agtransid'];
				}

				if ($regs[0] != '1') {
					$error_info = $regs[3];
					Merchants::autoReceive($merchant_id,$trans_id,$ag_trans_id,0,$error_info);
				} else {
					$error_info = '';
					Merchants::autoReceive($merchant_id,$trans_id,$ag_trans_id,1);
				}
			} else {
				$error_info = 'Can not connect to server!';
			}
			if (strlen($error_info) > 0) {
				$this->_redirect('/Transinfo/index/id/'.$trans_id.'/error/'.htmlentities(urlencode($error_info)));
			} else {
				$this->_redirect('/Transinfo/index/id/'.$trans_id);
			}
		}

		function rejectAction () {
			$scnsp = Zend_Registry::get('scnsp');
			$merchant_id = $scnsp->merchant_id;
			if ($merchant_id == null || $merchant_id <=0) {
				$this->_redirect('/index');
			}

			$post = $this->getRequest()->getParams();
			if (isset($post['transID']) && $post['transID'] > 0) {
				$trans_id = $post['transID'];
			} else {
				$this->_redirect('/Transaction/index');
			}
			
			$transaction = Merchants::getTransDetail($merchant_id,$trans_id);
			if (!sizeof($transaction)) $this->_redirect('/Transaction/index');

			Merchants::voidReceive($merchant_id,$trans_id);
			$this->_redirect('/Transinfo/index/id/'.$trans_id);
		}

		function sendTransactionToGateway($url, $parameters) {
			$server = parse_url($url);
			if (isset($server['port']) === false) {
			$server['port'] = ($server['scheme'] == 'https') ? 443 : 80;
			}
			if (isset($server['path']) === false) {
			$server['path'] = '/';
			}
			if (isset($server['user']) && isset($server['pass'])) {
			$header[] = 'Authorization: Basic ' . base64_encode($server['user'] . ':' . $server['pass']);
			}
			$curl = curl_init($server['scheme'] . '://' . $server['host'] . $server['path'] . (isset($server['query']) ? '?' . $server['query'] : ''));
			curl_setopt($curl, CURLOPT_PORT, $server['port']);
			curl_setopt($curl, CURLOPT_HEADER, 0);
			curl_setopt($curl, CURLOPT_SSL_VERIFYPEER, 0);
			curl_setopt($curl, CURLOPT_RETURNTRANSFER, 1);
			curl_setopt($curl, CURLOPT_FORBID_REUSE, 1);
			curl_setopt($curl, CURLOPT_FRESH_CONNECT, 1);
			curl_setopt($curl, CURLOPT_POST, 1);
			curl_setopt($curl, CURLOPT_POSTFIELDS, $parameters);
			$result = curl_exec($curl);
			curl_close($curl);
			return $result;
		}
	}